#!/usr/bin/env node

/**
 * Script de test pour le syst√®me de r√©compenses bas√© sur la r√©putation des factions
 */

const { calculateRewardsWithFactionReputation } = require('../src/Lib/threatLevels');

function testFactionRewards() {
  console.log('üß™ Test du syst√®me de r√©compenses bas√© sur la r√©putation des factions\n');
  
  const testCases = [
    { threatLevel: 3, faction: 'arasaka', reputation: 500, description: 'Arasaka - Alli√©' },
    { threatLevel: 3, faction: 'arasaka', reputation: 200, description: 'Arasaka - Ami' },
    { threatLevel: 3, faction: 'arasaka', reputation: 50, description: 'Arasaka - Favorable' },
    { threatLevel: 3, faction: 'arasaka', reputation: 0, description: 'Arasaka - Neutre' },
    { threatLevel: 3, faction: 'arasaka', reputation: -200, description: 'Arasaka - Hostile' },
    { threatLevel: 3, faction: 'arasaka', reputation: -500, description: 'Arasaka - Ennemi' },
    { threatLevel: 3, faction: 'arasaka', reputation: -800, description: 'Arasaka - Mortel' },
    { threatLevel: 3, faction: 'scavengers', reputation: 0, description: 'Scavengers - Neutre' },
    { threatLevel: 3, faction: 'scavengers', reputation: 500, description: 'Scavengers - Alli√©' },
    { threatLevel: 1, faction: 'militech', reputation: 0, description: 'Militech - Niveau 1' },
    { threatLevel: 5, faction: 'netWatch', reputation: 0, description: 'NetWatch - Niveau 5' }
  ];
  
  console.log('üìä R√©sultats des tests:\n');
  console.log('Niveau | Faction      | R√©putation | Description        | R√©compense | Multiplicateur');
  console.log('-------|--------------|------------|-------------------|------------|---------------');
  
  testCases.forEach(test => {
    const result = calculateRewardsWithFactionReputation(
      test.threatLevel, 
      test.faction, 
      test.reputation
    );
    
    const reputationStatus = getReputationStatus(test.reputation);
    const multiplier = result.breakdown.reputationMultiplier;
    
    console.log(
      `${test.threatLevel.toString().padStart(6)} | ` +
      `${test.faction.padEnd(12)} | ` +
      `${test.reputation.toString().padStart(10)} | ` +
      `${test.description.padEnd(18)} | ` +
      `${result.eddies.toString().padStart(10)} | ` +
      `${multiplier.toFixed(2)}x`
    );
  });
  
  console.log('\nüìà Analyse des multiplicateurs:');
  console.log('- Alli√© (500+): +50% de r√©compenses');
  console.log('- Ami (200+): +30% de r√©compenses');
  console.log('- Favorable (50+): +15% de r√©compenses');
  console.log('- Neutre (-50 √† 50): r√©compenses normales');
  console.log('- Hostile (-200 √† -50): -20% de r√©compenses');
  console.log('- Ennemi (-500 √† -200): -40% de r√©compenses');
  console.log('- Mortel (-500 et moins): -60% de r√©compenses');
  
  console.log('\nüéØ Impact sur le gameplay:');
  console.log('- Les factions avec une bonne r√©putation offrent plus de r√©compenses');
  console.log('- Les factions hostiles offrent moins de r√©compenses');
  console.log('- Cela encourage les joueurs √† maintenir de bonnes relations');
  console.log('- Les contrats automatiques utilisent une r√©putation neutre (0)');
  
  console.log('\n‚úÖ Test termin√©!');
}

function getReputationStatus(reputation) {
  if (reputation >= 500) return 'Alli√©';
  if (reputation >= 200) return 'Ami';
  if (reputation >= 50) return 'Favorable';
  if (reputation >= -50) return 'Neutre';
  if (reputation >= -200) return 'Hostile';
  if (reputation >= -500) return 'Ennemi';
  return 'Mortel';
}

// Ex√©cuter le test
if (require.main === module) {
  testFactionRewards();
}

module.exports = testFactionRewards; 